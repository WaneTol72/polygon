{"version":3,"sources":["Components/Cards.js","Components/Header.js","Components/Footer.js","Pages/Home.js","reportWebVitals.js","index.js"],"names":["Alerts","props","Toast","className","style","bottom","right","zIndex","delay","show","onClose","setShow","autohide","Header","Image","src","alt","Body","text","Cards","useEffect","runHolder","useInput","initialValue","useState","value","setValue","onChange","e","target","onClick","name","body","colorBg","colorBr","column","picSizeY","picSizeZ","width","buttonsText","buttonsColor","alertText","buttons","color","cardArray","setCardArray","setButtons","colors","mapCards","React","useMemo","map","variant","id","Col","md","paddingBottom","Card","bg","border","Img","Title","Text","Button","splice","Row","lg","placeholder","type","rows","cols","ButtonGroup","toLowerCase","Clock","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","Component","Navbar","Brand","href","Nav","Link","Footer","Container","roundedCircle","Home","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df9b6195.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {run as runHolder} from \"holderjs\";\r\nimport {Button, ButtonGroup, Card, Col, Image, Row, Toast} from \"react-bootstrap\";\r\n\r\nfunction Alerts(props) {\r\n    return (\r\n        <>\r\n            <Toast className=\"position-fixed w-50\" style={{bottom: \"0\", right: \"10px\", zIndex: \"1\"}} delay={5000}\r\n                   show={props.show} onClose={() => props.setShow(false)} autohide>\r\n                <Toast.Header>\r\n                    <Image\r\n                        src=\"holder.js/20x20?text=%20\"\r\n                        className=\"rounded mr-2\"\r\n                        alt=\"\"\r\n                    />\r\n                    <strong className=\"mr-auto\">Оповещение</strong>\r\n                </Toast.Header>\r\n                <Toast.Body>{props.text}</Toast.Body>\r\n            </Toast>\r\n        </>\r\n    );\r\n}\r\n\r\nexport function Cards() {\r\n    /* Инцилизация Holder.js */\r\n    useEffect(() => {runHolder('carimg');});\r\n    /* Кастомный хук */\r\n    const useInput = (initialValue) => {\r\n        const [value, setValue] = useState(initialValue);\r\n\r\n        const onChange = (e) => {\r\n            setValue(e.target.value)\r\n        }\r\n\r\n        const onClick = (e) => {\r\n            setValue(e)\r\n        }\r\n\r\n        return{\r\n            value,\r\n            onChange,\r\n            onClick\r\n        }\r\n    }\r\n    const name = useInput(\"\")\r\n    const body = useInput(\"\")\r\n    const colorBg = useInput(\"light\");\r\n    const colorBr = useInput(\"light\");\r\n    const column = useInput(\"\");\r\n    const picSizeY = useInput(\"180\");\r\n    const picSizeZ = useInput(\"100p\");\r\n    const width = useInput(\"25\");\r\n    const buttonsText = useInput(\"\");\r\n    const buttonsColor = useInput(\"\");\r\n    const alertText = useInput(\"\");\r\n    const [show, setShow] = useState(false);\r\n    const [cardArray, setCardArray] = useState([\r\n        {\r\n            name: \"Карточка 1\",\r\n            body: \"Тело карточки\",\r\n            colorBg: \"light\",\r\n            colorBr: \"\",\r\n            column: \"\",\r\n            picSizeY: \"180\",\r\n            picSizeZ: \"100p\",\r\n            buttons: [{text: \"Кнопка\", color: \"primary\"}]\r\n        },\r\n        {\r\n            name: \"Карточка 2\",\r\n            body: \"Тело карточки\",\r\n            colorBg: \"light\",\r\n            colorBr: \"\",\r\n            column: \"\",\r\n            picSizeY: \"180\",\r\n            picSizeZ: \"100p\",\r\n            buttons: [{text: \"Кнопка\", color: \"primary\"}]\r\n        }]);\r\n    const [buttons, setButtons] = useState([]);\r\n    const colors = ['Primary', 'Secondary', 'Success', 'Danger', 'Warning', 'Info', 'Light', 'Dark',]\r\n\r\n    const mapCards = React.useMemo(\r\n        () =>\r\n            cardArray.map((variant, id) => {\r\n                return (\r\n                    <Col key={id} md={variant.column} style={{paddingBottom: '15px'}}>\r\n                        <Card bg={variant.colorBg} text={variant.colorBg === 'light' ? 'dark' : 'white'}\r\n                              border={variant.colorBr}>\r\n                            <Card.Img className=\"carimg\" variant=\"top\" src={\"holder.js/\" + variant.picSizeZ + \"x\" + variant.picSizeY}/>\r\n                            <Card.Body>\r\n                                <Card.Title>{variant.name}</Card.Title>\r\n                                <Card.Text>\r\n                                    {variant.body}\r\n                                </Card.Text>\r\n                                {variant.buttons.map((variant) => <Button\r\n                                    variant={variant.color}>{variant.text}</Button>)}\r\n                                <Button onClick={() => {\r\n                                    cardArray.splice(id, 1)\r\n                                    setCardArray([...cardArray])\r\n                                    setShow(true)\r\n                                    alertText.onClick(\"Карточка удалена\")\r\n                                }\r\n                                } className=\"ml-3\" variant=\"danger\">Удалить</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                )\r\n            }),\r\n        [cardArray]\r\n    )\r\n    return (\r\n        <>\r\n            <h2 className=\"text-center\">Редактор карточек</h2>\r\n            <Row className=\"pb-3 m-0 text-center\">\r\n                <Col lg={4}>\r\n                    <h4>Заголовок карточки </h4>\r\n                    <div className=\"mb-3\"><input placeholder=\"Карточка 1\" type=\"text\" onChange={e => name.onChange(e)}/></div>\r\n                    <h5>Содержимое карточки</h5>\r\n                    <div className=\"mb-3\"><textarea placeholder=\"Бла-бла-бла...\" rows=\"3\" cols=\"35\" onChange={e => body.onChange(e)}/></div>\r\n                    <h5 >Ширина предпросмотра карточки:</h5>\r\n                    <div><input className=\"w-25 text-center\" placeholder=\"В процентах\" type=\"text\" onChange={e => width.onChange(e)}/></div>\r\n                </Col>\r\n                <Col lg={4}>\r\n                    <h5 >Цвет тела карточки:</h5>\r\n                    <ButtonGroup className=\"d-block\">\r\n                        {\r\n                            colors.map((variant, id) => (\r\n                                <Button key={id} variant={variant.toLowerCase()} onClick={() => {\r\n                                    colorBg.onClick(variant.toLowerCase())\r\n                                    alertText.onClick(\"Выбран цвет карточки \" + variant.toLowerCase())\r\n                                    setShow(true)\r\n                                }\r\n                                }>{variant}</Button>\r\n                            ))\r\n                        }\r\n                    </ButtonGroup>\r\n                    <h5> Цвет обводки карточки:</h5>\r\n                    <ButtonGroup className=\"d-block\">\r\n                        {\r\n                            colors.map((variant, id) => (\r\n                                <Button key={id} variant={variant.toLowerCase()} onClick={() => {\r\n                                    colorBr.onClick(variant.toLowerCase())\r\n                                    alertText.onClick(\"Выбран цвет обводки \" + variant.toLowerCase())\r\n                                    setShow(true)\r\n                                }}>{variant}</Button>\r\n                            ))\r\n                        }\r\n                    </ButtonGroup>\r\n                    <h5>Колонны, занимаемые карточкой:</h5>\r\n                    <div><input className=\"w-25 text-center\" placeholder=\"От 1 до 12\" type=\"text\" onChange={e => column.onChange(e)}/></div>\r\n                    <h5>Размер картинки:</h5>\r\n                    <div>\r\n                        <input className=\"w-25 text-center\" placeholder=\"100p\" type=\"text\" onChange={e => picSizeZ.onChange(e)}/>\r\n                        x\r\n                        <input className=\"w-25 text-center\" placeholder=\"180\" type=\"text\" onChange={e => picSizeY.onChange(e)}/>\r\n                    </div>\r\n                    <p className=\"text-black-50\">p - проценты от блока</p>\r\n                </Col>\r\n                <Col lg={4}>\r\n                    <h4>Добавить кнопки </h4>\r\n                    <h5>Текст кнопки:</h5>\r\n                    <div><input className=\"w-25 text-center\" placeholder=\"Кнопка\" type=\"text\" onChange={e => buttonsText.onChange(e)}/></div>\r\n                    <h5>Цвет кнопки:</h5>\r\n                    <ButtonGroup className=\"d-block\">\r\n                        {\r\n                            colors.map((variant, id) => (\r\n                                <Button key={id}\r\n                                        variant={variant.toLowerCase()}\r\n                                        onClick={() => {\r\n                                    buttonsColor.onClick(variant.toLowerCase())\r\n                                    alertText.onClick(\"Выбран цвет \" + variant.toLowerCase())\r\n                                    setShow(true)\r\n                                        }\r\n                                        }\r\n                                >{variant}</Button>))\r\n                        }\r\n                    </ButtonGroup>\r\n                    <Button className=\"mr-auto ml-auto mt-2 d-block\" variant=\"success\" onClick={() => {\r\n                        setButtons([...buttons, {text: buttonsText.value, color: buttonsColor.value}])\r\n                        alertText.onClick(\"Кнопка успешно добавлена\")\r\n                        setShow(true)\r\n                    }\r\n                    }>Добавить кнопку</Button>\r\n                    <Button className=\"mr-auto ml-auto mt-2 d-block\" variant=\"danger\" onClick={() => {\r\n                        setButtons([])\r\n                        alertText.onClick(\"Кнопки успешно удалены\")\r\n                        setShow(true)\r\n                    }}>Удалить кнопки</Button>\r\n                </Col>\r\n            </Row>\r\n            <h4 className=\"text-center\">Предпросмотр карточки</h4>\r\n            <Card className=\" m-auto\" style={{width: width.value + \"%\"}} bg={colorBg.value} text={colorBg.value === 'light' ? 'dark' : 'white'} border={colorBr.value}>\r\n                <Card.Img className=\"carimg\" variant=\"top\" src={\"holder.js/\" + picSizeZ.value + \"x\" + picSizeY.value}/>\r\n                <Card.Body>\r\n                    <Card.Title>{name.value}</Card.Title>\r\n                    <Card.Text>\r\n                        {body.value}\r\n                    </Card.Text>\r\n                    {buttons ? buttons.map((variant, id) => <Button key={id}\r\n                                                                    variant={variant.color}>{variant.text}</Button>) : \"\"}\r\n                </Card.Body>\r\n            </Card>\r\n            <Button className=\"d-block mr-auto ml-auto mb-3 mt-3\" onClick={\r\n                () => {\r\n                    setCardArray(\r\n                        [...cardArray, {\r\n                            name: name.value,\r\n                            body: body.value,\r\n                            colorBg: colorBg.value,\r\n                            colorBr: colorBr.value,\r\n                            buttons: buttons,\r\n                            column: column.value,\r\n                            picSizeY: picSizeY.value,\r\n                            picSizeZ: picSizeZ.value\r\n                        }]\r\n                    )\r\n                    setShow(true)\r\n                    alertText.onClick(\"Карточка успешно добавлена\")\r\n                }\r\n            }>Добавить</Button>\r\n            <Row className=\"m-0 border-top border-dark pt-3\">\r\n                {mapCards}\r\n            </Row>\r\n            <Alerts show={show} setShow={setShow} text={alertText.value}/>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Nav, Navbar} from \"react-bootstrap\";\r\n\r\nexport function Header() {\r\n    class Clock extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {date: new Date()};\r\n        }\r\n\r\n        componentDidMount() {\r\n            this.timerID = setInterval(\r\n                () => this.tick(),\r\n                1000\r\n            );\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            clearInterval(this.timerID);\r\n        }\r\n\r\n        tick() {\r\n            this.setState({\r\n                date: new Date()\r\n            });\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <div>\r\n                    <h4 className=\"text-light\">Часики-то тикают {this.state.date.toLocaleTimeString()}</h4>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\">Полигон</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"#cards\">Карточки</Nav.Link>\r\n            </Nav>\r\n            <Clock/>,\r\n        </Navbar>\r\n    )\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport {Col, Container, Image, Row} from \"react-bootstrap\";\r\nimport {run as runHolder} from \"holderjs\";\r\n\r\n\r\nexport function Footer() {\r\n    useEffect(() => {runHolder('carimg');});\r\n    return (\r\n            <footer className=\"bg-dark\">\r\n                <Container className=\"text-light\">\r\n                    <Row>\r\n                        <Col md={3}>\r\n                            <h4 className=\"text-center\">Связь со мной</h4>\r\n                            <div className=\"mb-2 mt-2\">\r\n                                    <Image\r\n                                        src=\"holder.js/40x40\" roundedCircle\r\n                                    />\r\n                                    <p className=\"d-inline align-content-center\"> Вконтакте</p>\r\n                            </div>\r\n                            <div className=\"mb-2\">\r\n                                <Image\r\n                                    src=\"holder.js/40x40\" roundedCircle\r\n                                />\r\n                                <p className=\"d-inline align-content-center\"> GitHub</p>\r\n                            </div>\r\n                            <div className=\"mb-2\">\r\n                                <Image\r\n                                    src=\"holder.js/40x40\" roundedCircle\r\n                                />\r\n                                <p className=\"d-inline align-content-center\"> Discord</p>\r\n                            </div>\r\n                        </Col>\r\n                        <Col>\r\n                            <p>HEllo</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <h5 className=\"m-0 pb-2 text-center\">By WaneTol72 2021</h5>\r\n                </Container>\r\n            </footer>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'holderjs';\r\nimport {Cards} from \"../Components/Cards\";\r\nimport {Header} from \"../Components/Header\";\r\nimport {Footer} from \"../Components/Footer\";\r\n\r\nexport class Home extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Header/>\r\n                <Cards id=\"cards\"/>\r\n                <Footer />\r\n            </>\r\n        )\r\n    }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Home} from './Pages/Home';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Home/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}