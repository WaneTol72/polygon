{"version":3,"sources":["Components/Cards.js","Pages/Home.js","reportWebVitals.js","index.js"],"names":["Alerts","props","Toast","className","style","bottom","right","zIndex","delay","show","onClose","setShow","autohide","Header","src","alt","Body","text","Cards","useEffect","runHolder","useState","name","body","colorBg","colorBr","colum","buttons","color","Array","setArray","Name","setName","setBody","ColorBg","setColorBg","ColorBr","setColorBr","Colum","setColum","Buttons","setButtons","ButtonsColor","setButtonsColor","ButtonsText","setButtonsText","AlertText","setAlertText","Colors","mapCards","React","useMemo","map","variant","id","Col","md","paddingBottom","Card","bg","border","Img","Title","Text","Button","onClick","splice","Row","lg","placeholder","type","onChange","e","target","value","rows","cols","ButtonGroup","toLowerCase","Clock","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","Component","Navbar","Brand","href","Nav","Link","Home","Accordion","Toggle","as","eventKey","Collapse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.983c144a.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {run as runHolder} from \"holderjs\";\r\nimport {Button, ButtonGroup, Card, Col, Row, Toast} from \"react-bootstrap\";\r\n\r\nfunction Alerts(props) {\r\n    return (\r\n        <>\r\n            <Toast className=\"position-fixed w-50\" style={{bottom: \"0\", right: \"0\", zIndex: \"1\"}} delay={5000}\r\n                   show={props.show} onClose={() => props.setShow(false)} autohide>\r\n                <Toast.Header>\r\n                    <img\r\n                        src=\"holder.js/20x20?text=%20\"\r\n                        className=\"rounded mr-2\"\r\n                        alt=\"\"\r\n                    />\r\n                    <strong className=\"mr-auto\">Оповещение</strong>\r\n                </Toast.Header>\r\n                <Toast.Body>{props.text}</Toast.Body>\r\n            </Toast>\r\n        </>\r\n    );\r\n}\r\n\r\nexport function Cards() {\r\n    useEffect(() => {\r\n        runHolder('carimg');\r\n    });\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [Array, setArray] = useState([\r\n        {\r\n            name: \"Карточка 1\",\r\n            body: \"Тело карточки\",\r\n            colorBg: \"light\",\r\n            colorBr: \"\",\r\n            colum: \"\",\r\n            buttons: [{text: \"Кнопка\", color: \"primary\"}]\r\n        },\r\n        {\r\n            name: \"Карточка 2\",\r\n            body: \"Тело карточки\",\r\n            colorBg: \"light\",\r\n            colorBr: \"\",\r\n            colum: \"\",\r\n            buttons: [{text: \"Кнопка\", color: \"primary\"}]\r\n        }]);\r\n    const [Name, setName] = useState(\"\");\r\n    const [Body, setBody] = useState(\"\");\r\n    const [ColorBg, setColorBg] = useState(\"light\");\r\n    const [ColorBr, setColorBr] = useState(\"light\");\r\n    const [Colum, setColum] = useState(\"\");\r\n    const [Buttons, setButtons] = useState([]);\r\n    const [ButtonsColor, setButtonsColor] = useState(\"\");\r\n    const [ButtonsText, setButtonsText] = useState(\"\");\r\n    const [AlertText, setAlertText] = useState(\"\");\r\n    const Colors = [\r\n        'Primary',\r\n        'Secondary',\r\n        'Success',\r\n        'Danger',\r\n        'Warning',\r\n        'Info',\r\n        'Light',\r\n        'Dark',\r\n    ]\r\n\r\n    const mapCards = React.useMemo(\r\n        () =>\r\n            Array.map((variant, id) => {\r\n                return (\r\n                    <Col key={id} md={variant.colum} style={{paddingBottom: '15px'}}>\r\n                        <Card bg={variant.colorBg} text={variant.colorBg === 'light' ? 'dark' : 'white'}\r\n                              border={variant.colorBr}>\r\n                            <Card.Img className=\"carimg\" variant=\"top\" src=\"holder.js/100px180\"/>\r\n                            <Card.Body>\r\n                                <Card.Title>{variant.name}</Card.Title>\r\n                                <Card.Text>\r\n                                    {variant.body}\r\n                                </Card.Text>\r\n                                {variant.buttons.map((variant) => <Button\r\n                                    variant={variant.color}>{variant.text}</Button>)}\r\n                                <Button onClick={() => {\r\n                                    Array.splice(id, 1)\r\n                                    setArray([...Array])\r\n                                    setShow(true)\r\n                                    setAlertText(\"Карточка удалена\")\r\n                                }\r\n                                } className=\"ml-3\" variant=\"danger\">Удалить</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                )\r\n            }),\r\n        [Array]\r\n    )\r\n    return (\r\n        <>\r\n            <h2 className=\"text-center\">Редактор карточек</h2>\r\n            <Row className=\"pb-3\">\r\n                <Col lg={4}>\r\n                    <h4 className=\"text-center\">Заголовок карточки </h4>\r\n                    <div className=\"text-center mb-3\"><input placeholder=\"Карточка 1\" type=\"text\"\r\n                                                             onChange={e => setName(e.target.value)}/></div>\r\n                    <h5 className=\"text-center\">Содержимое карточки</h5>\r\n                    <div className=\"text-center mb-3\"><textarea placeholder=\"Бла-бла-бла\" rows=\"3\" cols=\"35\"\r\n                                                                onChange={e => setBody(e.target.value)}/></div>\r\n                </Col>\r\n                <Col lg={4}>\r\n                    <h5 className=\"text-center\">Цвет тела карточки:</h5>\r\n                    <ButtonGroup className=\"d-block text-center\">\r\n                        {\r\n                            Colors.map((variant, id) => (\r\n                                <Button key={id} variant={variant.toLowerCase()} onClick={() => {\r\n                                    setColorBg(variant.toLowerCase())\r\n                                    setAlertText(\"Выбран цвет карточки \" + variant.toLowerCase())\r\n                                    setShow(true)\r\n                                }\r\n                                }>{variant}</Button>\r\n                            ))\r\n                        }\r\n                    </ButtonGroup>\r\n                    <h5 className=\"text-center\"> Цвет обводки карточки:</h5>\r\n                    <ButtonGroup className=\"d-block text-center\">\r\n                        {\r\n                            Colors.map((variant, id) => (\r\n                                <Button key={id} variant={variant.toLowerCase()} onClick={() => {\r\n                                    setColorBr(variant.toLowerCase())\r\n                                    setAlertText(\"Выбран цвет обводки \" + variant.toLowerCase())\r\n                                    setShow(true)\r\n                                }}>{variant}</Button>\r\n                            ))\r\n                        }\r\n                    </ButtonGroup>\r\n                    <h5 className=\"text-center\">Ячейки, занимаемые карточкой:</h5>\r\n                    <div className=\"text-center \"><input className=\"w-25 text-center\" placeholder=\"От 1 до 12\"\r\n                                                         type=\"text\" onChange={e => setColum(e.target.value)}/></div>\r\n                    <p className=\"text-center text-black-50\">*В строке 12 ячеек*</p>\r\n                </Col>\r\n                <Col lg={4}>\r\n                    <h4 className=\"text-center\">Добавить кнопки </h4>\r\n                    <h5 className=\"text-center\">Текст кнопки:</h5>\r\n                    <div className=\"text-center \"><input className=\"w-25 text-center\" placeholder=\"Кнопка\" type=\"text\"\r\n                                                         onChange={e => setButtonsText(e.target.value)}/></div>\r\n                    <h5 className=\"text-center\">Цвет кнопки:</h5>\r\n                    <ButtonGroup className=\"d-block text-center\">\r\n                        {\r\n                            Colors.map((variant, id) => (\r\n                                <Button key={id} variant={variant.toLowerCase()} onClick={() => {\r\n                                    setButtonsColor(variant.toLowerCase())\r\n                                    setAlertText(\"Выбран цвет \" + variant.toLowerCase())\r\n                                    setShow(true)\r\n                                }}>{variant}</Button>))\r\n                        }\r\n                    </ButtonGroup>\r\n                    <Button className=\"mr-auto ml-auto mt-2 d-block\" variant=\"success\" onClick={() => {\r\n                        setButtons([...Buttons, {text: ButtonsText, color: ButtonsColor}])\r\n                        setAlertText(\"Кнопка успешно добавлена\")\r\n                        setShow(true)\r\n                    }\r\n                    }>Добавить кнопку</Button>\r\n                    <Button className=\"mr-auto ml-auto mt-2 d-block\" variant=\"danger\" onClick={() => {\r\n                        setButtons([])\r\n                        setAlertText(\"Кнопки успешно удалены\")\r\n                        setShow(true)\r\n                    }}>Удалить кнопки</Button>\r\n                </Col>\r\n            </Row>\r\n            <h4 className=\"text-center\">Предпросмотр карточки</h4>\r\n            <Card className=\"w-50 m-auto\" bg={ColorBg} text={ColorBg === 'light' ? 'dark' : 'white'} border={ColorBr}>\r\n                <Card.Img className=\"carimg\" variant=\"top\" src=\"holder.js/100px180\"/>\r\n                <Card.Body>\r\n                    <Card.Title>{Name}</Card.Title>\r\n                    <Card.Text>\r\n                        {Body}\r\n                    </Card.Text>\r\n                    {Buttons ? Buttons.map((variant, id) => <Button key={id}\r\n                                                                    variant={variant.color}>{variant.text}</Button>) : \"\"}\r\n                </Card.Body>\r\n            </Card>\r\n            <Button className=\"d-block mr-auto ml-auto mb-3 mt-3\" onClick={\r\n                () => {\r\n                    setArray(\r\n                        [...Array, {\r\n                            name: Name,\r\n                            body: Body,\r\n                            colorBg: ColorBg,\r\n                            colorBr: ColorBr,\r\n                            buttons: Buttons,\r\n                            colum: Colum\r\n                        }]\r\n                    )\r\n                    setShow(true)\r\n                    setAlertText(\"Карточка успешно добавлена\")\r\n                }\r\n            }>Добавить</Button>\r\n            <Row className=\"m-0 border-top border-dark pt-3\">\r\n                {mapCards}\r\n            </Row>\r\n            <Alerts show={show} setShow={setShow} text={AlertText}/>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Accordion, Button, Card, Nav, Navbar} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'holderjs';\r\nimport {Cards} from \"../Components/Cards\";\r\n\r\nfunction Header() {\r\n    class Clock extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {date: new Date()};\r\n        }\r\n\r\n        componentDidMount() {\r\n            this.timerID = setInterval(\r\n                () => this.tick(),\r\n                1000\r\n            );\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            clearInterval(this.timerID);\r\n        }\r\n\r\n        tick() {\r\n            this.setState({\r\n                date: new Date()\r\n            });\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <div>\r\n                    <h4 className=\"text-light\">Часики-то тикают {this.state.date.toLocaleTimeString()}</h4>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                <Nav.Link href=\"#Cards\">Карточки</Nav.Link>\r\n                <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\r\n            </Nav>\r\n            <Clock/>,\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nfunction Buttons() {\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\">Primary</Button>{' '}\r\n            <Button variant=\"secondary\">Secondary</Button>{' '}\r\n            <Button variant=\"success\">Success</Button>{' '}\r\n            <Button variant=\"warning\">Warning</Button>{' '}\r\n            <Button variant=\"danger\">Danger</Button> <Button variant=\"info\">Info</Button>{' '}\r\n            <Button variant=\"light\">Light</Button> <Button variant=\"dark\">Dark</Button>{' '}\r\n            <Button variant=\"link\">Link</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport class Home extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Header/>\r\n                <Accordion>\r\n                    <Card>\r\n                        <Card.Header className=\"text-center\">\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                                <h1 className=\"text-center\">Карточки хуле</h1>\r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                            <Card.Body className=\"p-0\">\r\n                                <Cards id=\"Cards\"/>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                    <Card>\r\n                        <Card.Header className=\"text-center\">\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n                                <h1 className=\"text-center\">Кнопочки</h1>\r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                            <Card.Body><Buttons/></Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </Accordion>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Home} from './Pages/Home';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Home/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}